{"version":3,"sources":["components/FetchWeather.js","App.js","reportWebVitals.js","index.js"],"names":["fetchWeather","query","a","axios","get","params","q","units","APPID","data","App","useState","setQuery","weather","setWeather","search","e","key","useEffect","onloading","className","type","placeholder","value","onChange","target","onKeyPress","main","name","sys","country","Math","round","temp","src","icon","alt","description","temp_min","humidity","temp_max","wind","speed","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kRAKaA,EAAY,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,sEACDC,IAAMC,IAJrB,kDAI8B,CAClCC,OAAQ,CACJC,EAAGL,EACHM,MAAO,SACPC,MAPI,sCAEY,uBAChBC,EADgB,EAChBA,KADgB,kBASjBA,GATiB,2CAAH,sD,OC+EVC,EAhFH,WAEV,MAA0BC,mBAAS,UAAnC,mBAAOV,EAAP,KAAcW,EAAd,KACA,EAA8BD,mBAAS,IAAvC,mBAAOE,EAAP,KAAgBC,EAAhB,KAEMC,EAAM,uCAAG,WAAOC,GAAP,eAAAd,EAAA,yDACC,UAAVc,EAAEC,IADO,gCAEQjB,EAAaC,GAFrB,OAELQ,EAFK,OAIXK,EAAWL,GACXG,EAAS,IALE,2CAAH,sDAkBZ,OATAM,qBAAU,YACO,uCAAG,4BAAAhB,EAAA,sEACGF,EAAaC,GADhB,OACVQ,EADU,OAEhBK,EAAWL,GACXG,EAAS,IAHO,2CAAH,qDAKfO,KACC,IAGD,sBAAKC,UAAU,sBAAf,UACE,sBAAKA,UAAU,mBAAf,UACE,qBAAIA,UAAU,WAAd,oBAAgC,oCAAhC,WACA,oBAAGA,UAAU,yBAAb,0BAAmD,gDAErD,uBAAOC,KAAK,OAAOD,UAAU,qBAAqBE,YAAY,YAAYC,MAAOtB,EAAOuB,SAAU,SAACR,GAAD,OAAOJ,EAASI,EAAES,OAAOF,QAAQG,WAAYX,IAC9IF,EAAQc,MACP,qBAAKP,UAAU,iBAAf,SACE,sBAAKA,UAAU,MAAf,UACE,sBAAKA,UAAU,sCAAf,UACE,qBAAIA,UAAU,wBAAd,UACE,+BAAOP,EAAQe,OACf,8BAAMf,EAAQgB,IAAIC,aAEpB,sBAAKV,UAAU,YAAf,UACGW,KAAKC,MAAMnB,EAAQc,KAAKM,MACzB,2CAEF,sBAAKb,UAAU,OAAf,UACE,qBAAKA,UAAU,YAAYc,IAAG,4CAAuCrB,EAAQA,QAAQ,GAAGsB,KAA1D,WAAyEC,IAAKvB,EAAQA,QAAQ,GAAGwB,cAC/H,mBAAGjB,UAAU,kCAAb,SAAgDP,EAAQA,QAAQ,GAAGwB,oBAGvE,sBAAKjB,UAAU,0BAAf,UACE,mBAAGA,UAAU,8BAAb,gCACA,uBACA,sBAAKA,UAAU,sBAAf,UACE,sBAAKA,UAAU,MAAf,UACE,sBAAKA,UAAU,mBAAf,UACE,mBAAGA,UAAU,iBAAb,uBACA,qBAAIA,UAAU,kBAAd,UAAiCP,EAAQc,KAAKW,SAAS,8CAEzD,sBAAKlB,UAAU,mBAAf,UACE,mBAAGA,UAAU,iBAAb,sBACA,qBAAIA,UAAU,kBAAd,UAAiCP,EAAQc,KAAKY,SAAS,+CAG3D,sBAAKnB,UAAU,MAAf,UACE,sBAAKA,UAAU,mBAAf,UACE,mBAAGA,UAAU,iBAAb,uBACA,qBAAIA,UAAU,kBAAd,UAAiCP,EAAQc,KAAKa,SAAS,8CAEzD,sBAAKpB,UAAU,mBAAf,UACE,mBAAGA,UAAU,iBAAb,kBACA,qBAAIA,UAAU,kBAAd,UAAiCP,EAAQ4B,KAAKC,MAAM,gEC5DzDC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.16aa71a9.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst URL = 'https://api.openweathermap.org/data/2.5/weather';\r\nconst API_KEY = '7bc8c4154d7f7782899f1aaa96ad9fa8';\r\n\r\nexport const fetchWeather = async (query) => {\r\n    const { data } = await axios.get(URL, {\r\n        params: {\r\n            q: query,\r\n            units: 'metric',\r\n            APPID: API_KEY,\r\n        }\r\n    });\r\n\r\n    return data;\r\n}","import { useEffect, useState } from 'react';\r\nimport './styles/App.css';\r\nimport { fetchWeather } from './components/FetchWeather';\r\n\r\nconst App = () => {\r\n\r\n  const [query, setQuery] = useState('Manila');\r\n  const [weather, setWeather] = useState({});\r\n\r\n  const search = async (e) => {\r\n    if (e.key === 'Enter') {\r\n      const data = await fetchWeather(query);\r\n\r\n      setWeather(data);\r\n      setQuery('');\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    const onloading = async () => {\r\n      const data = await fetchWeather(query);\r\n      setWeather(data);\r\n      setQuery('');\r\n    }\r\n    onloading();\r\n  }, [])\r\n\r\n  return (\r\n    <div className=\"main-container mt-3\">\r\n      <div className=\"mb-3 text-center\">\r\n        <h4 className=\"app-name\">Weather<sup>2</sup> Lang</h4>\r\n        <p className=\"app-develop text-light\">Developed by <strong>Kurt</strong></p>\r\n      </div>\r\n      <input type=\"text\" className=\"search text-center\" placeholder=\"Search...\" value={query} onChange={(e) => setQuery(e.target.value)} onKeyPress={search} />\r\n      {weather.main && (\r\n        <div className=\"city container\">\r\n          <div className=\"row\">\r\n            <div className=\"col-lg-6 col-md-12 pt-4 text-center\">\r\n              <h2 className=\"city-name text-center\">\r\n                <span>{weather.name}</span>\r\n                <sup>{weather.sys.country}</sup>\r\n              </h2>\r\n              <div className=\"city-temp\">\r\n                {Math.round(weather.main.temp)}\r\n                <sup>&deg;C</sup>\r\n              </div>\r\n              <div className=\"info\">\r\n                <img className=\"city-icon\" src={`https://openweathermap.org/img/wn/${weather.weather[0].icon}@2x.png`} alt={weather.weather[0].description} />\r\n                <p className=\"weather-description text-center\">{weather.weather[0].description}</p>\r\n              </div>\r\n            </div>\r\n            <div className=\"col-lg-6 col-md-12 pt-3\">\r\n              <p className=\"highlight-title text-center\">Today's Highlights</p>\r\n              <hr />\r\n              <div className=\"highlights row pt-3\">\r\n                <div className=\"col\">\r\n                  <div className=\"mb-5 text-center\">\r\n                    <p className=\"highlight-info\">Min Temp.</p>\r\n                    <h3 className=\"highlight-value\">{weather.main.temp_min}<sup>&deg;C</sup></h3>\r\n                  </div>\r\n                  <div className=\"mb-3 text-center\">\r\n                    <p className=\"highlight-info\">Humidity</p>\r\n                    <h3 className=\"highlight-value\">{weather.main.humidity}<small>%</small></h3>\r\n                  </div>\r\n                </div>\r\n                <div className=\"col\">\r\n                  <div className=\"mb-5 text-center\">\r\n                    <p className=\"highlight-info\">Max Temp.</p>\r\n                    <h3 className=\"highlight-value\">{weather.main.temp_max}<sup>&deg;C</sup></h3>\r\n                  </div>\r\n                  <div className=\"mb-3 text-center\">\r\n                    <p className=\"highlight-info\">Wind</p>\r\n                    <h3 className=\"highlight-value\">{weather.wind.speed}<small>m/s</small></h3>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}